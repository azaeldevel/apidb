project(mysql-reader-c++ CXX)
EXECUTE_PROCESS(COMMAND date +"%Y%m%d%H%M%S" OUTPUT_VARIABLE ${PROJECT_NAME}_VERSION_BUILD)
SET(${PROJECT_NAME}_VERSION_STAGE ${apidb_VERSION_STAGE})
SET(${PROJECT_NAME}_VERSION_NAME ${apidb_VERSION_NAME})

FIND_PACKAGE(MySQL REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../cmake/Modules/)
IF(MySQL_FOUND)
	INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE(octetos-toolkit-common-c++ REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/toolkit/)
IF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_TOOLKIT_COMMON_CPP_INCLUDE_DIR})
	#MESSAGE(STATUS "OCTETOS_TOOLKIT_COMMON_CPP_LIBRARIES: " ${OCTETOS_TOOLKIT_COMMON_CPP_LIBRARIES} )
ELSEIF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la toolkit-common-c++.")
ENDIF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)

FIND_PACKAGE(octetos-toolkit-clientdb-myc++ REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../cmake/Modules/toolkit/)
IF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_TOOLKIT_CLIENTDB_MYCPP_INCLUDE_DIR})
ELSEIF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la toolkit-cliendb-myc++.")
ENDIF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)

FIND_PACKAGE( LibXml2 REQUIRED )
IF(LIBXML2_FOUND)
	INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE( Boost COMPONENTS REQUIRED )
IF(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE(tar REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../cmake/Modules/)
IF(TAR_FOUND)
	INCLUDE_DIRECTORIES(${TAR_INCLUDE_DIR})
ELSEIF()
	MESSAGE(FATAL_ERROR "No se encontro la Libreria tar.")
ENDIF()

FIND_PACKAGE(CUnit REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../cmake/Modules/)
IF(CUNIT_FOUND)
	INCLUDE_DIRECTORIES(${CUNIT_INCLUDE_DIR})
ENDIF()

find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)
BISON_TARGET(parser parser.yy ${CMAKE_CURRENT_BINARY_DIR}/parser.tab.cc)
FLEX_TARGET(lexer lexer.l ${CMAKE_CURRENT_BINARY_DIR}/lexer.yy.cc)
ADD_FLEX_BISON_DEPENDENCY(lexer parser)

include_directories(${CMAKE_CURRENT_BINARY_DIR})
#MESSAGE(STATUS "In Reader FLEX_lexer_OUTPUTS: " ${FLEX_lexer_OUTPUTS}) 
#MESSAGE(STATUS "In Reader BISON_parser_OUTPUTS: " ${BISON_parser_OUTPUTS})

ADD_LIBRARY(${PROJECT_NAME}-obj  OBJECT analyzer.cpp scanner.cpp ${FLEX_lexer_OUTPUTS} ${BISON_parser_OUTPUTS})
#target_include_directories(${PROJECT_NAME}-obj PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>  $<INSTALL_INTERFACE:.>)
#target_include_directories(${PROJECT_NAME}-obj  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>  $<INSTALL_INTERFACE:.>)
set_target_properties(${PROJECT_NAME}-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 )

ADD_LIBRARY(${PROJECT_NAME}  STATIC analyzer.cpp scanner.cpp ${FLEX_lexer_OUTPUTS} ${BISON_parser_OUTPUTS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE  . ${CMAKE_CURRENT_BINARY_DIR})
SET_PROPERTY(TARGET ${PROJECT_NAME}  PROPERTY CXX_STANDARD 11)
SET(LIBREADER ${PROJECT_NAME} PARENT_SCOPE)
#TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBRARIES})

