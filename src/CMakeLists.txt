CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(apidb VERSION 1.0.0 LANGUAGES CXX)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

EXECUTE_PROCESS(COMMAND date +"%Y%m%d%H%I" OUTPUT_VARIABLE apidb_VERSION_BUILD)
SET(apidb_VERSION_STAGE "snapshot")
SET(apidb_VERSION_NAME "leopard")
CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/versionInfo.h.in" "${PROJECT_SOURCE_DIR}/versionInfo.h")

FIND_PACKAGE(BISON REQUIRED)

FIND_PACKAGE(FLEX REQUIRED)

FIND_PACKAGE(MySQL REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
IF(MySQL_FOUND)
	INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE(octetos-toolkit-common-c++ REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/toolkit/)
IF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_TOOLKIT_COMMON_CPP_INCLUDE_DIR})
ELSEIF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la toolkit-common-c++.")
ENDIF(OCTETOS_TOOLKIT_COMMON_CPP_FOUND)

FIND_PACKAGE(octetos-toolkit-clientdb-myc++ REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/toolkit/)
IF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_TOOLKIT_CLIENTDB_MYCPP_INCLUDE_DIR})
ELSEIF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la toolkit-cliendb-myc++.")
ENDIF(OCTETOS_TOOLKIT_CLIENTDB_MYCPP_FOUND)

FIND_PACKAGE( LibXml2 REQUIRED )
IF(LIBXML2_FOUND)
	INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE( Boost COMPONENTS REQUIRED )
IF(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
ENDIF()

FIND_PACKAGE(tar REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
IF(TAR_FOUND)
	INCLUDE_DIRECTORIES(${TAR_INCLUDE_DIR})
ELSEIF()
	MESSAGE(FATAL_ERROR "No se encontro la Libreria tar.")
ENDIF()

BISON_TARGET(parser parser.yy ${PROJECT_SOURCE_DIR}/parser.tab.cc)
FLEX_TARGET(lexer lexer.l ${PROJECT_SOURCE_DIR}/lexer.yy.cc)
ADD_FLEX_BISON_DEPENDENCY(lexer parser)

SET(SOURCES_BUILDING driver.cpp scanner.cpp apidb.cpp common-mysql.cpp analyzer.cpp generator.cpp generator-c++.cpp common.cpp projectRW_v1.cpp ${FLEX_lexer_OUTPUTS} ${BISON_parser_OUTPUTS})
SET(LIBRARIES  ${OCTETOS_TOOLKIT_CLIENTDB_MYCPP_LIBRARIES} ${OCTETOS_TOOLKIT_COMMON_CPP_LIBRARIES} ${MYSQL_LIBRARY} ${LIBXML2_LIBRARIES} ${Boost_LIBRARIES} ${LibXML++_LIBRARIES})

ADD_EXECUTABLE(developing  developing.cpp ${SOURCES_BUILDING})
TARGET_LINK_LIBRARIES(developing ${LIBRARIES})

ADD_EXECUTABLE(apidbgen command.cpp ${SOURCES_BUILDING})
TARGET_LINK_LIBRARIES(apidbgen ${LIBRARIES})


ADD_LIBRARY(apidb STATIC ${SOURCES_BUILDING})
TARGET_LINK_LIBRARIES(apidb ${LIBRARIES})

INSTALL(TARGETS apidbgen DESTINATION bin)
INSTALL(TARGETS apidb DESTINATION lib/octetos/apidb)
INSTALL(FILES apidb.hpp DESTINATION include/octetos/apidb)

install (TARGETS apidbgen DESTINATION bin)
include (InstallRequiredSystemLibraries)
SET (CPACK_PACKAGE_VERSION_MAJOR "${apidb_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${apidb_VERSION_MINOR}")
INCLUDE (CPack)

