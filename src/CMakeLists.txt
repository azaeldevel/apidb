CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(src LANGUAGES CXX)

SET (CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -ldl")
SET (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -ldl")

SET(DDM_DESKTOP_DIR "/usr/share/applications/")
SET(DDM_PIXMAPS_DIR "/usr/share/icons/")
SET(${CMAKE_PROJECT_NAME}_PAKAGENAME_DECORED "APIDB")


if(NOT APIDB_VERSION_STAGE)
        MESSAGE(FATAL_ERROR "Es necesario que indique una etapa de desasorrollo, use -DAPIDB_VERSION_STAGE='etapa'.\nEn donde etapa puede ser .. snapshot,alpha,beta,rc,release.\nEn términos generales acepta cualquier miembro de la enumeración toolkit::Version::Stage para mas detalles vea la información de este paquete.")
elseif(${APIDB_VERSION_STAGE} STREQUAL "release")
        if(NOT CMAKE_BUILD_TYPE)
                MESSAGE(FATAL_ERROR "La etapa del proyecto, es 'release', asigne tambien CMAKE_BUILD_TYPE=Release para mejor estabilidad.")
        endif()
endif()
if(NOT CMAKE_BUILD_TYPE)

elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    if(NOT APIDB_VERSION_STAGE)
                MESSAGE(FATAL_ERROR "Asigno CMAKE_BUILD_TYPE = Release para que los componentes de APIDB funcione correctamente es necesario que asigne APIDB_VERSION_STAGE = release")
	elseif(NOT ${APIDB_VERSION_STAGE} STREQUAL "release")
		MESSAGE(FATAL_ERROR "Asigno CMAKE_BUILD_TYPE = Release para que los componentes de APIDB funcione correctamente es necesario que asigne APIDB_VERSION_STAGE = release")
    endif()
endif()


CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/versionInfo.h.in" "${PROJECT_SOURCE_DIR}/versionInfo.h")

CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/apidb.desktop.in" "${CMAKE_CURRENT_BINARY_DIR}/apidb.desktop")


##################################################################################################################
####FIND PAKAGES
FIND_PACKAGE(PkgConfig REQUIRED)

#FIND_PACKAGE(octetos-core REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules)
PKG_CHECK_MODULES(OCTETOS_CORE REQUIRED octetos-core)
IF(OCTETOS_CORE_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_CORE_INCLUDE_DIR})
ELSEIF(OCTETOS_CORE_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la octetos-core-c++.")
ENDIF(OCTETOS_CORE_FOUND)
IF(APIDB_MARIADB STREQUAL "Y")
    PKG_CHECK_MODULES(LIBMARIADB REQUIRED libmariadb)
    IF(LIBMARIADB_FOUND)
        INCLUDE_DIRECTORIES(${LIBMARIADB_INCLUDE_DIR})
    ELSEIF(NOT LIBMARIADB_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la libmariadb")
    ENDIF()
    PKG_CHECK_MODULES(OCTETOS_DB_MARIA REQUIRED octetos-db-maria)
    IF(OCTETOS_DB_MARIA_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_MARIA_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_MARIA_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-mariadb.")
    ENDIF()
    add_definitions(-DAPIDB_MARIADB)
ENDIF()
IF(APIDB_MYSQL STREQUAL "Y")
    #FIND_PACKAGE(MySQL REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
    PKG_CHECK_MODULES(MySQL REQUIRED libmariadb)
    IF(MySQL_FOUND)
        INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
    ELSEIF()
        MESSAGE(FATAL_ERROR "No se encontro la MySQL client.")
    ENDIF()
    #FIND_PACKAGE(octetos-db-mysql REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules)
    PKG_CHECK_MODULES(OCTETOS_DB_MYSQL REQUIRED octetos-db-mysql)
    IF(OCTETOS_DB_MYSQL_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_MYSQL_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_MYSQL_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-mysql.")
    ENDIF(OCTETOS_DB_MYSQL_FOUND)
    add_definitions(-DAPIDB_MYSQL)
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    FIND_PACKAGE(octetos-db-postgresql REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules)
    IF(OCTETOS_DB_POSTGRESQL_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_POSTGRESQL_INCLUDE_DIR} ${POSTGRESQL_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_POSTGRESQL_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-postgresql.")
    ENDIF(OCTETOS_DB_POSTGRESQL_FOUND)
    add_definitions(-DAPIDB_POSTGRESQL)
ENDIF()
FIND_PACKAGE( LibXml2 REQUIRED )
IF(LIBXML2_FOUND)
	INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
ELSEIF()
	MESSAGE(FATAL_ERROR "No se encontro la libxml2.")
ENDIF()
FIND_PACKAGE( Boost COMPONENTS REQUIRED )
IF(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
ENDIF()
FIND_PACKAGE(tar REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
IF(TAR_FOUND)
	INCLUDE_DIRECTORIES(${TAR_INCLUDE_DIR})
ELSEIF(NOT TAR_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la Libreria tar.")
ENDIF()
PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)
IF(GTK3_FOUND)
	INCLUDE_DIRECTORIES(${GTK3_INCLUDE_DIRS})
ELSEIF()
	MESSAGE(FATAL_ERROR "No se encontro la Libreria GTK3.")
ENDIF()
#FIND_PACKAGE(CUnit REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
PKG_CHECK_MODULES(CUNIT REQUIRED cunit)
IF(CUNIT_FOUND)
	INCLUDE_DIRECTORIES(${CUNIT_INCLUDE_DIR})
ENDIF()
if(APIDB_DOC)
FIND_PACKAGE(Doxygen)
IF(Doxygen_FOUND)
        SET(doxyfile_in "doxygen-public-c++")
ELSE()
        MESSAGE(FATAL_ERROR "No se encontro Doxygen.")
ENDIF()
endif()



###################################################################################################
###BUILD
SET(LIBRARIES  ${OCTETOS_CORE_LIBRARIES} ${LIBXML2_LIBRARIES} ${Boost_LIBRARIES} ${LibXML++_LIBRARIES} ${TAR_LIBRARIES} ${GTK3_LIBRARIES} ${CUNIT_LIBRARIES})
IF(APIDB_MARIADB STREQUAL "Y")
    SET(LIBRARIES ${LIBRARIES} ${OCTETOS_DB_MARIA_LIBRARIES} ${LIBMARIADB_LIBRARIES})
ENDIF()



IF(APIDB_MARIADB STREQUAL "Y")
    INCLUDE_DIRECTORIES(mariadb-reader-c++)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/mariadb-reader-c++/)
    SET(LIBREADER "NULL")
    SET(LIBPARTIAL1 ${CMAKE_PROJECT_NAME}-partial1)
    ADD_SUBDIRECTORY(mariadb-reader-c++)
ENDIF()
IF(APIDB_MYSQL STREQUAL "Y")
    INCLUDE_DIRECTORIES(mysql-reader-c++)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/mysql-reader-c++/)
    SET(LIBREADER "NULL")
    SET(LIBPARTIAL1 ${CMAKE_PROJECT_NAME}-partial1)
    ADD_SUBDIRECTORY(mysql-reader-c++)
ENDIF()





IF(APIDB_MYSQL STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MySQL-obj OBJECT common-mysql.cpp common.cpp analyzer.cpp dynamic-mysql.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-MySQL-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1)  
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MySQL SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-MySQL-obj> $<TARGET_OBJECTS:${LIBREADER}-obj>) 
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-MySQL ${LIBRARIES})
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MariaDB-obj OBJECT common-mariadb.cpp common.cpp analyzer.cpp dynamic-mariadb.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-MariaDB-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1)  
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MariaDB SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-MariaDB-obj> $<TARGET_OBJECTS:${LIBREADER}-obj>) 
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-MariaDB ${LIBRARIES})
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-PostgreSQL SHARED analyzer-postgresql.cpp common-postgresql.cpp common.cpp analyzer.cpp dynamic-posgresql.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-PostgreSQL  PROPERTIES POSITION_INDEPENDENT_CODE 1 )
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-PostgreSQL ${LIBRARIES})
ENDIF()




ADD_LIBRARY(${CMAKE_PROJECT_NAME}-Driver-obj OBJECT driver.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-Driver-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 ) 
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-Driver SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-Driver-obj>)
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-obj  OBJECT apidb.cpp  generator.cpp generator-c++.cpp  Errors.cpp driver.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 ) 
ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-obj>)
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-Driver)
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj  OBJECT ConfigureProject.cpp ConfigureProjectRead_v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 )
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj>)
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}-build apidb-build.cpp)
ADD_DEPENDENCIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
ADD_EXECUTABLE(testing-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} tests/v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )








ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}-gtk3 apidb-gtk3.cpp Application.cpp Application-CaptureFuntion.cpp Application-CaptureParameter.cpp Application-CaptureTable.cpp Application-TreeView.cpp )
ADD_DEPENDENCIES(${CMAKE_PROJECT_NAME}-gtk3 ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
    
    
    

IF(APIDB_MARIADB STREQUAL "Y")
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES} ${CMAKE_PROJECT_NAME}-MariaDB)  
ENDIF()
IF(APIDB_MYSQL STREQUAL "Y")
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
ENDIF()  






TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})       
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-gtk3 ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
TARGET_LINK_LIBRARIES(testing-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES})






execute_process(COMMAND convert -background none -size 128x128 "${CMAKE_CURRENT_SOURCE_DIR}/apidb.svg" "${CMAKE_CURRENT_BINARY_DIR}/apidb-128x128.png")
execute_process(COMMAND convert -background none -size 256x256 "${CMAKE_CURRENT_SOURCE_DIR}/apidb.svg" "${CMAKE_CURRENT_BINARY_DIR}/apidb-256x256.png")

IF(Doxygen_FOUND AND APIDB_DOC)
	add_custom_target(
		doc ALL
		COMMAND ${DOXYGEN_EXECUTABLE} "${PROJECT_SOURCE_DIR}/${doxyfile_in}"
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		COMMENT "Generating API documentation with Doxygen"
		VERBATIM
	)
ENDIF()

if(APIDB_EXAMPLES)
    #ADD_EXECUTABLE(capture examples/capture_v${${PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )
    #TARGET_LINK_LIBRARIES(capture ${LIBRARIES} ${LIBREADER} ${PROJECT_NAME}-ConfigureProject-v${${PROJECT_NAME}_VERSION_MAJOR})

    ADD_EXECUTABLE(createProy examples/createProy_v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )
    TARGET_LINK_LIBRARIES(createProy ${LIBRARIES} ${LIBREADER} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
    
    #add_custom_command(examples/sysapp.apidb COMMAND ./examples/createProy WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Creación de ejemplo.." )
	#ADD_DEPENDENCIES(examples/sysapp.apidb examples/capture examples/createProy)
endif()

###################################################################################################################
###INSTALL
INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-build DESTINATION /bin)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-gtk3 DESTINATION /bin)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME}  DESTINATION lib)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-Driver  DESTINATION lib)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} DESTINATION lib)
IF(APIDB_MYSQL STREQUAL "Y")
    INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-MySQL  DESTINATION lib)
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-MariaDB  DESTINATION lib)
ENDIF()
INSTALL(FILES apidb.hpp DESTINATION include/octetos/apidb)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb.desktop"  DESTINATION ${DDM_DESKTOP_DIR})
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb-256x256.png"  DESTINATION ${DDM_PIXMAPS_DIR})
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb-128x128.png"  DESTINATION /usr/shared/octetos/apidb)

include (InstallRequiredSystemLibraries)
SET (CPACK_PACKAGE_VERSION_MAJOR "${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${${CMAKE_PROJECT_NAME}_VERSION_MINOR}")
SET (CPACK_PACKAGE_VERSION_PATCH "${${CMAKE_PROJECT_NAME}_VERSION_PATCH}")
INCLUDE (CPack)

