CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(src LANGUAGES CXX)


SET (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fpermissive")

SET(DDM_DESKTOP_DIR "/usr/share/applications/")
SET(DDM_PIXMAPS_DIR "/usr/share/icons/")
SET(${CMAKE_PROJECT_NAME}_PAKAGENAME_DECORED "APIDB")
IF(APIDB_DEBIAN_APCKAGE STREQUAL "Y")
	SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
ENDIF()


if(PLATFORM STREQUAL "LINUX_ARCH")
    add_definitions(-DLINUX_ARCH)
elseif(PLATFORM STREQUAL "LINUX_GENTOO")
    add_definitions(-DLINUX_GENTOO)
elseif(PLATFORM STREQUAL "LINUX_DEBIAN")
    add_definitions(-DLINUX_DEBIAN)
else()
    MESSAGE(FATAL_ERROR "Indique el sistema opeartivo mediante la variable PLATFORM")
endif()
add_definitions(-DOCTETOS_DB_MEDIUMWORD)



SET(APIDB_BUILD_CORE "Y")
SET(APIDB_MYSQL "N")
SET(APIDB_POSTGRESQL "N")
SET(APIDB_MARIADB "N")
SET(APIDB_BUILD_COMMANDS "N")
SET(APIDB_BUILD_GTK3 "N")
SET(APIDB_BUILD_TEST "Y")
SET(APIDB_INSTALL_CORE "N")
SET(APIDB_INSTALL_COMMANDS "N")
SET(APIDB_INSTALL_GTK3 "N")
SET(APIDB_INSTALL_MYSQL "N")
SET(APIDB_INSTALL_MARIADB "N")
SET(APIDB_INSTALL_POSTGRESQL "N")
foreach(AINST IN LISTS APIDBINSTALL)
	#message(STATUS "detect ${AINST}")
	IF(AINST STREQUAL "CORE")
		SET(APIDB_INSTALL_CORE "Y")
	ELSEIF(AINST STREQUAL "COMMANDS")
		SET(APIDB_BUILD_COMMANDS "Y")
		SET(APIDB_INSTALL_COMMANDS "Y")
	ELSEIF(AINST STREQUAL "GTK3")
		SET(APIDB_BUILD_GTK3 "Y")
		SET(APIDB_INSTALL_GTK3 "Y")
	ELSEIF(AINST STREQUAL "MYSQL")
		SET(APIDB_MYSQL "Y")
		SET(APIDB_INSTALL_MYSQL "Y")
	ELSEIF(AINST STREQUAL "MARIADB")
		SET(APIDB_MARIADB "Y")
		SET(APIDB_INSTALL_MARIADB "Y")
	ELSEIF(AINST STREQUAL "POSTGRESQL")
		SET(APIDB_POSTGRESQL "Y")
		SET(APIDB_INSTALL_POSTGRESQL "Y")
	ENDIF()
endforeach()


if(NOT APIDB_VERSION_STAGE)
        MESSAGE(FATAL_ERROR "Es necesario que indique una etapa de desasorrollo, use -DAPIDB_VERSION_STAGE='etapa'.\nEn donde etapa puede ser .. snapshot,alpha,beta,rc,release.\nEn términos generales acepta cualquier miembro de la enumeración toolkit::Version::Stage para mas detalles vea la información de este paquete.")
elseif(${APIDB_VERSION_STAGE} STREQUAL "release")
        if(NOT CMAKE_BUILD_TYPE)
                MESSAGE(FATAL_ERROR "La etapa del proyecto, es 'release', asigne tambien CMAKE_BUILD_TYPE=Release para mejor estabilidad.")
        endif()
endif()
if(NOT CMAKE_BUILD_TYPE)

elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    if(NOT APIDB_VERSION_STAGE)
                MESSAGE(FATAL_ERROR "Asigno CMAKE_BUILD_TYPE = Release para que los componentes de APIDB funcione correctamente es necesario que asigne APIDB_VERSION_STAGE = release")
	elseif(NOT ${APIDB_VERSION_STAGE} STREQUAL "Release")
		MESSAGE(FATAL_ERROR "Asigno CMAKE_BUILD_TYPE = Release para que los componentes de APIDB funcione correctamente es necesario que asigne APIDB_VERSION_STAGE = release")
    endif()
endif()


CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/versionInfo.h.in" "${PROJECT_SOURCE_DIR}/versionInfo.h")

CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/apidb.desktop.in" "${CMAKE_CURRENT_BINARY_DIR}/apidb.desktop")


##################################################################################################################
####FIND PAKAGES
FIND_PACKAGE(PkgConfig REQUIRED)
 
#FIND_PACKAGE(octetos-core REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules)
PKG_CHECK_MODULES(OCTETOS_CORE REQUIRED octetos-core)
IF(OCTETOS_CORE_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_CORE_INCLUDE_DIR})
ELSEIF(OCTETOS_CORE_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la octetos-core-c++.")
ENDIF(OCTETOS_CORE_FOUND)

PKG_CHECK_MODULES(OCTETOS_COREUTILS REQUIRED octetos-coreutils)
IF(OCTETOS_COREUTILS_FOUND)
	INCLUDE_DIRECTORIES(${OCTETOS_COREUTILS_INCLUDE_DIR})
ELSEIF(OCTETOS_COREUTILS_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la octetos-core-c++.")
ENDIF(OCTETOS_COREUTILS_FOUND)

PKG_CHECK_MODULES(OCTETOS_DB_ABSTRACT REQUIRED octetos-db-abstract)
IF(OCTETOS_DB_ABSTRACT_FOUND)
	
ELSEIF(OCTETOS_DB_ABSTRACT_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la octetos-db-abstrac")
ENDIF()


IF(APIDB_MARIADB STREQUAL "Y")
    PKG_CHECK_MODULES(LIBMARIADB REQUIRED libmariadb)
    IF(LIBMARIADB_FOUND)
        INCLUDE_DIRECTORIES(${LIBMARIADB_INCLUDE_DIR})
    ELSEIF(NOT LIBMARIADB_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la libmariadb")
    ENDIF()
    PKG_CHECK_MODULES(OCTETOS_DB_MARIA REQUIRED octetos-db-maria)
    IF(OCTETOS_DB_MARIA_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_MARIA_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_MARIA_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-mariadb.")
    ENDIF()
    add_definitions(-DAPIDB_MARIADB)
ENDIF()


IF(APIDB_MYSQL STREQUAL "Y")
    PKG_CHECK_MODULES(MYSQL REQUIRED mysqlclient)
    IF(MYSQL_FOUND)
        INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
    ELSEIF()
        MESSAGE(FATAL_ERROR "No se encontro la MySQL client.")
    ENDIF()
    PKG_CHECK_MODULES(OCTETOS_DB_MYSQL REQUIRED octetos-db-mysql)
    IF(OCTETOS_DB_MYSQL_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_MYSQL_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_MYSQL_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-mysql.")
    ENDIF(OCTETOS_DB_MYSQL_FOUND)
    add_definitions(-DAPIDB_MYSQL)
ENDIF()

IF(APIDB_POSTGRESQL STREQUAL "Y")
    PKG_CHECK_MODULES(LIBPQ REQUIRED libpq)
    IF(LIBPQ_FOUND)
        INCLUDE_DIRECTORIES(${LIBPQ_INCLUDE_DIRS})
    ELSEIF(LIBPQ_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la libpq.")
    ENDIF(LIBPQ_FOUND)
    #FIND_PACKAGE(octetos-db-postgresql REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules)
    PKG_CHECK_MODULES(OCTETOS_DB_POSTGRESQL REQUIRED octetos-db-postgresql  )
    IF(OCTETOS_DB_POSTGRESQL_FOUND)
        INCLUDE_DIRECTORIES(${OCTETOS_DB_POSTGRESQL_INCLUDE_DIR} ${POSTGRESQL_INCLUDE_DIR})
    ELSEIF(OCTETOS_DB_POSTGRESQL_FOUND)
        MESSAGE(FATAL_ERROR "No se encontro la octetos-db-postgresql.")
    ENDIF(OCTETOS_DB_POSTGRESQL_FOUND)
    add_definitions(-DAPIDB_POSTGRESQL)
ENDIF()
FIND_PACKAGE( LibXml2 REQUIRED )
IF(LIBXML2_FOUND)
	INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
ELSEIF()
	MESSAGE(FATAL_ERROR "No se encontro la libxml2.")
ENDIF()
FIND_PACKAGE( Boost COMPONENTS REQUIRED )
IF(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
ENDIF()
FIND_PACKAGE(tar REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
IF(TAR_FOUND)
	INCLUDE_DIRECTORIES(${TAR_INCLUDE_DIR})
ELSEIF(NOT TAR_FOUND)
	MESSAGE(FATAL_ERROR "No se encontro la Libreria tar.")
ENDIF()
IF(APIDB_BUILD_GTK3 STREQUAL "Y")
	PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)
	IF(GTK3_FOUND)
		INCLUDE_DIRECTORIES(${GTK3_INCLUDE_DIRS})
	ELSEIF()
		MESSAGE(FATAL_ERROR "No se encontro la Libreria GTK3.")
	ENDIF()
ENDIF()
#FIND_PACKAGE(CUnit REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../cmake/Modules/)
PKG_CHECK_MODULES(CUNIT REQUIRED cunit)
IF(CUNIT_FOUND)
	INCLUDE_DIRECTORIES(${CUNIT_INCLUDE_DIR})
ENDIF()
if(APIDB_DOC)
FIND_PACKAGE(Doxygen)
IF(Doxygen_FOUND)
        SET(doxyfile_in "doxygen-public-c++")
ELSE()
        MESSAGE(FATAL_ERROR "No se encontro Doxygen.")
ENDIF()
endif()
PKG_CHECK_MODULES(OPENSSL REQUIRED openssl)
IF(OPENSSL_FOUND)
	INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
ELSE()
        MESSAGE(FATAL_ERROR "No se encontro OpenSSL.")
ENDIF()


###################################################################################################
###BUILD
SET(LIBRARIES  ${OCTETOS_CORE_LIBRARIES} ${OCTETOS_COREUTILS_LIBRARIES} ${LIBXML2_LIBRARIES} ${Boost_LIBRARIES} ${LibXML++_LIBRARIES} ${TAR_LIBRARIES} ${GTK3_LIBRARIES} ${CUNIT_LIBRARIES} ${OCTETOS_DB_ABSTRACT_LIBRARIES} ${CMAKE_DL_LIBS} ${OPENSSL_LIBRARIES})
IF(APIDB_MYSQL STREQUAL "Y")
    SET(LIBRARIES ${LIBRARIES} ${OCTETOS_DB_MYSQL_LIBRARIES} ${MYSQL_LIBRARIES})
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    SET(LIBRARIES ${LIBRARIES} ${OCTETOS_DB_MARIA_LIBRARIES} ${LIBMARIADB_LIBRARIES})
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    SET(LIBRARIES ${LIBRARIES} ${OCTETOS_DB_POSTGRESQL_LIBRARIES} ${LIBPQ_LIBRARIES})
ENDIF()
IF(APIDB_MYSQL STREQUAL "Y")
    SET(LIBRARIES ${LIBRARIES} ${OCTETOS_DB_MYSQL_LIBRARIES} ${MYSQL_LIBRARIES})
ENDIF()


IF(APIDB_MYSQL STREQUAL "Y")
    #INCLUDE_DIRECTORIES(mysql-reader-c++)
    #INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/mysql-reader-c++/)
    SET(LIBREADER_MYSQL "NULL")
    #SET(LIBPARTIAL1 ${CMAKE_PROJECT_NAME}-partial1)
    ADD_SUBDIRECTORY(mysql-reader-c++)
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    #INCLUDE_DIRECTORIES(mariadb-reader-c++)
    #INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/mariadb-reader-c++/)
    SET(LIBREADER_MARIADB "NULL")
    #SET(LIBPARTIAL1 ${CMAKE_PROJECT_NAME}-partial1)
    ADD_SUBDIRECTORY(mariadb-reader-c++)
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    #INCLUDE_DIRECTORIES(postgresql-reader-c++)
    #INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/postgresql-reader-c++/)
    SET(LIBREADER_POSTGRESQL "NULL")
    #SET(LIBPARTIAL1 ${CMAKE_PROJECT_NAME}-partial1)
    ADD_SUBDIRECTORY(postgresql-reader-c++)
ENDIF()


ADD_LIBRARY(${CMAKE_PROJECT_NAME}-Driver-obj OBJECT driver.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-Driver-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 ) 
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-Driver SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-Driver-obj>)


ADD_LIBRARY(${CMAKE_PROJECT_NAME}-obj  OBJECT apidb.cpp analyzer.cpp generator.cpp generator-cmake.cpp generator-maven.cpp generator-c++.cpp generator-java.cpp generator-java.cpp  driver.cpp common.cpp generator-php.cpp generator-insert.cpp generator-select.cpp generator-update.cpp generator-remove.cpp generator-getters.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 ) 

ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-obj>)
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-Driver ${LIBRARIES})

ADD_LIBRARY(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj  OBJECT ConfigureProject.cpp ConfigureProject-xml.cpp  ConfigureProject-compress-tar.cpp)
set_target_properties(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1 )
ADD_LIBRARY(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}-obj>)
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES})










IF(APIDB_MYSQL STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MySQL-obj OBJECT common-mysql.cpp  dynamic-mysql.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-MySQL-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1)  
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MySQL SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-MySQL-obj> $<TARGET_OBJECTS:${LIBREADER_MYSQL}>) 
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-MySQL ${CMAKE_PROJECT_NAME} ${LIBRARIES})
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MariaDB-obj OBJECT  dynamic-mariadb.cpp common-mariadb.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-MariaDB-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1)  
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-MariaDB SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-MariaDB-obj> $<TARGET_OBJECTS:${LIBREADER_MARIADB}>) 
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-MariaDB ${CMAKE_PROJECT_NAME} ${LIBRARIES})
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-PostgreSQL-obj OBJECT dynamic-postgresql.cpp common-postgresql.cpp)
    SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME}-PostgreSQL-obj  PROPERTIES POSITION_INDEPENDENT_CODE 1)  
    ADD_LIBRARY(${CMAKE_PROJECT_NAME}-PostgreSQL SHARED $<TARGET_OBJECTS:${CMAKE_PROJECT_NAME}-PostgreSQL-obj> $<TARGET_OBJECTS:${LIBREADER_POSTGRESQL}>)
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-PostgreSQL ${CMAKE_PROJECT_NAME} ${LIBRARIES})
ENDIF()







    
    

IF(APIDB_MYSQL STREQUAL "Y")
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES} ${CMAKE_PROJECT_NAME}-MySQL) 
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y")
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES} ${CMAKE_PROJECT_NAME}-PostgreSQL)  
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y")
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES} ${CMAKE_PROJECT_NAME}-MariaDB) 
ENDIF()  









IF(APIDB_BUILD_COMMANDS STREQUAL "Y")
    ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}-build apidb-build.cpp)
    ADD_DEPENDENCIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
    IF(APIDB_MYSQL STREQUAL "Y")
        TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME}-MySQL) 
    ENDIF()
    IF(APIDB_POSTGRESQL STREQUAL "Y")
        TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME}-PostgreSQL)  
    ENDIF()
    IF(APIDB_MARIADB STREQUAL "Y")
        TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-build ${CMAKE_PROJECT_NAME}-MariaDB) 
    ENDIF()
ENDIF()

IF(APIDB_BUILD_GTK3 STREQUAL "Y")
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}-gtk3 apidb-gtk3.cpp Application.cpp Application-CaptureFuntion.cpp Application-CaptureParameter.cpp Application-CaptureTable.cpp Application-TreeView.cpp)
ADD_DEPENDENCIES(${CMAKE_PROJECT_NAME}-gtk3 ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-gtk3 ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
ENDIF()




execute_process(COMMAND rsvg-convert ${CMAKE_CURRENT_SOURCE_DIR}/apidb.svg -w 128 -h 128 -f png -o ${CMAKE_CURRENT_BINARY_DIR}/apidb-128x128.png)
execute_process(COMMAND rsvg-convert ${CMAKE_CURRENT_SOURCE_DIR}/apidb.svg -w 256 -h 256 -f png -o ${CMAKE_CURRENT_BINARY_DIR}/apidb-256x256.png)

IF(Doxygen_FOUND AND APIDB_DOC)
	add_custom_target(
		doc ALL
		COMMAND ${DOXYGEN_EXECUTABLE} "${PROJECT_SOURCE_DIR}/${doxyfile_in}"
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		COMMENT "Generating API documentation with Doxygen"
		VERBATIM
	)
ENDIF()

if(APIDB_BUILD_TEST)
    #ADD_EXECUTABLE(testing-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} tests/v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )
    #TARGET_LINK_LIBRARIES(testing-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${CMAKE_PROJECT_NAME} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} ${LIBRARIES})
endif()

if (${ENABLE_TESTS})
    enable_testing()
    add_subdirectory(tests/)
endif()

if(APIDB_EXAMPLES)
    #ADD_EXECUTABLE(capture examples/capture_v${${PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )
    #TARGET_LINK_LIBRARIES(capture ${LIBRARIES} ${LIBREADER} ${PROJECT_NAME}-ConfigureProject-v${${PROJECT_NAME}_VERSION_MAJOR})

    ADD_EXECUTABLE(createProy examples/createProy_v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.cpp ${SOURCES_BUILDING} )
    TARGET_LINK_LIBRARIES(createProy ${LIBRARIES} ${LIBREADER} ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR})
    
    #add_custom_command(examples/sysapp.apidb COMMAND ./examples/createProy WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Creación de ejemplo.." )
	#ADD_DEPENDENCIES(examples/sysapp.apidb examples/capture examples/createProy)
endif()

###################################################################################################################
###INSTALL
IF(APIDB_INSTALL_CORE STREQUAL "Y")
	INSTALL(TARGETS ${CMAKE_PROJECT_NAME}  DESTINATION lib)
	INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-Driver  DESTINATION lib)
	INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-ConfigureProject-v${${CMAKE_PROJECT_NAME}_VERSION_MAJOR} DESTINATION lib)
	
	INSTALL(FILES apidb.hpp DESTINATION include/octetos/apidb)
ENDIF()
IF(APIDB_INSTALL_COMMANDS STREQUAL "Y" AND APIDB_BUILD_COMMANDS STREQUAL "Y")
	IF(PLATFORM STREQUAL "LINUX_ARCH" )
		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-build DESTINATION bin)
	ELSEIF(PLATFORM STREQUAL "LINUX_GENTOO")
		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-build DESTINATION /bin)
	ELSEIF(PLATFORM STREQUAL "LINUX_DEBIAN")
    		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-build DESTINATION /usr/bin)
	ELSE ()
		MESSAGE(FATAL_ERROR "Plataforma desconocida.")
	ENDIF()
ENDIF()
IF(APIDB_INSTALL_GTK3 STREQUAL "Y" AND APIDB_BUILD_GTK3 STREQUAL "Y")
	IF(PLATFORM STREQUAL "LINUX_ARCH" )
		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-gtk3 DESTINATION bin)
	ELSEIF(PLATFORM STREQUAL "LINUX_GENTOO")
		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-gtk3 DESTINATION /bin)
	ELSEIF(PLATFORM STREQUAL "LINUX_DEBIAN")
    		INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-gtk3 DESTINATION /usr/bin)
	ELSE ()
		MESSAGE(FATAL_ERROR "Plataforma desconocida.")
	ENDIF()
	INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb.desktop"  DESTINATION ${DDM_DESKTOP_DIR})
	INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb-256x256.png"  DESTINATION ${DDM_PIXMAPS_DIR})
	INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/apidb-128x128.png"  DESTINATION /usr/shared/octetos/apidb)
ENDIF()
IF(APIDB_MYSQL STREQUAL "Y" AND APIDB_INSTALL_MYSQL STREQUAL "Y")
    INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-MySQL  DESTINATION lib)
ENDIF()
IF(APIDB_MARIADB STREQUAL "Y" AND APIDB_INSTALL_MARIADB STREQUAL "Y")
    INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-MariaDB  DESTINATION lib)
ENDIF()
IF(APIDB_POSTGRESQL STREQUAL "Y" AND APIDB_INSTALL_POSTGRESQL STREQUAL "Y")
    INSTALL(TARGETS ${CMAKE_PROJECT_NAME}-PostgreSQL  DESTINATION lib)
ENDIF()

INCLUDE (InstallRequiredSystemLibraries)
IF(APIDB_DEBIAN_APCKAGE STREQUAL "Y" AND PLATFORM STREQUAL "LINUX_DEBIAN")
	SET(CPACK_GENERATOR "DEB")
	SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Azael Reyes")
    IF(APIDB_INSTALL_CORE STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "libapidb-core-dev")
	ELSEIF(APIDB_INSTALL_COMMANDS STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "apidb-commands")
	ELSEIF(APIDB_INSTALL_GTK3 STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "apidb-gtk3")
	ELSEIF(APIDB_INSTALL_MYSQL STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "libapidb-mysql-dev")
	ELSEIF(APIDB_INSTALL_MARIADB STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "libapidb-mariadb-dev")
	ELSEIF(APIDB_INSTALL_POSTGRESQL STREQUAL "Y")
		SET(CPACK_PACKAGE_NAME "libapidb-postgresql-dev")
	ENDIF()
ENDIF()
SET (CPACK_PACKAGE_VERSION_MAJOR "${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${${CMAKE_PROJECT_NAME}_VERSION_MINOR}")
SET (CPACK_PACKAGE_VERSION_PATCH "${${CMAKE_PROJECT_NAME}_VERSION_PATCH}")
INCLUDE (CPack)

